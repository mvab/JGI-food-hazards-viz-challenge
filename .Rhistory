ifelse(str_detect(raw_text_product, "(?i)rodent"), "rodents",
"other foreign body")))))))))))))))))))))))))))))))))))))))))
foreign_extra <- data %>%
filter(hazard_group != "foreign bodies") %>%
mutate(contaminant = ifelse(str_detect(hazard_description, "(?i)plastic"), "plastic",
ifelse(str_detect( raw_text_product, "(?i)plastic"), "plastic",
ifelse(str_detect(hazard_description, "(?i)polystyrene"), "plastic",
ifelse(str_detect(hazard_description, "(?i)film"), "plastic",
ifelse(str_detect(hazard_description, "(?i)nylon"), "plastic",
ifelse(str_detect(raw_text_product, "(?i)rubber"), "plastic",
ifelse(str_detect(raw_text_product, "(?i)conveyor belt"), "plastic",
ifelse(str_detect(raw_text_product, "(?i)blue particles"), "plastic",
ifelse(str_detect(raw_text_product, "(?i)white and blue"), "plastic",
ifelse(str_detect(raw_text_product, "(?i)packaging tape"), "plastic",
ifelse(str_detect(hazard_description, "(?i)metal"), "metal",
ifelse(str_detect( raw_text_product, "(?i)metal"), "metal",
ifelse(str_detect( raw_text_product, "(?i)blade"), "metal",
ifelse(str_detect( raw_text_product, "(?i)aluminum"), "metal",
ifelse(str_detect( raw_text_product, "(?i) iron"), "metal",
ifelse(str_detect( raw_text_product, "(?i)sharp"), "metal",
ifelse(str_detect( raw_text_product, "(?i)needle"), "metal",
ifelse(str_detect(hazard_description, "(?i)wires"), "metal",
ifelse(str_detect(hazard_description, "(?i)nails"), "metal",
ifelse(str_detect(summary, "(?i)foil"), "metal",
ifelse(str_detect(hazard_description, "(?i)glass"), "glass",
ifelse(str_detect( raw_text_product, "(?i)glass"), "glass",
ifelse(str_detect(hazard_description, "(?i)insect"), "insects",
ifelse(str_detect(raw_text_product, "(?i)insect"), "insects",
"other foreign body"))))))))))))))))))))))))) %>%
filter(contaminant != "other foreign body") %>%
filter(!(contaminant == "metal" & grepl("heavy metal|metallic|Lead|alkaloid|metalaxyl", raw_text_product, ignore.case = T))) %>%
filter(!(contaminant == "metal" & grepl("heavy metal|metallic|Lead|alkaloid", summary, ignore.case = T))) %>%
filter(!(contaminant == "metal" & hazard_description %in% c("undeclared peanut", "unauthorised substance magnesium",
"unauthorised substance iron glycinate chelate", "too high content of iron",
"salmonella outbreak" ,"salmonella spp sticks", "copper", "undesignated additive"))) %>%
filter(!(contaminant %in% c("plastic", "glass") & !grepl("piece|foreign|extraneous|find|bits|particle|plastic in", raw_text_product, ignore.case = T)))
dat9<-bind_rows(foreign, foreign_extra) %>%
filter(date_published_year_month != "NA-NA") %>%
filter(contaminant %in% c("plastic", "metal", "glass", "insects")) %>%
group_by(contaminant) %>%
#filter(n()>500) %>%
ungroup %>%
select(contaminant, date_published_year_month, date_published_year, date_published_year_quarter, ID_incident) %>% distinct() %>%
group_by(contaminant, date_published_year_month, date_published_year, date_published_year_quarter) %>%
mutate(count = n())%>%
distinct()
View(dat9)
dat9<-bind_rows(foreign, foreign_extra) %>%
filter(date_published_year_month != "NA-NA") %>%
filter(contaminant %in% c("plastic", "metal", "glass", "insects")) %>%
group_by(contaminant)
dat9<-bind_rows(foreign, foreign_extra)
View(dat9)
View(foreign_extra)
dat9<-bind_rows(foreign, foreign_extra)
View(dat9)
View(foreign)
foreign <- data %>%
filter(hazard_group == "foreign bodies") %>%
mutate(contaminant = ifelse(str_detect(hazard_description, "(?i)plastic"), "plastic",
ifelse(str_detect( raw_text_product, "(?i)plastic"), "plastic",
ifelse(str_detect(hazard_description, "(?i)polystyrene"), "plastic",
ifelse(str_detect(hazard_description, "(?i)film"), "plastic",
ifelse(str_detect(hazard_description, "(?i)nylon"), "plastic",
ifelse(str_detect(raw_text_product, "(?i)rubber"), "plastic",
ifelse(str_detect(raw_text_product, "(?i)conveyor belt"), "plastic",
ifelse(str_detect(raw_text_product, "(?i)blue particles"), "plastic",
ifelse(str_detect(raw_text_product, "(?i)white and blue"), "plastic",
ifelse(str_detect(raw_text_product, "(?i)packaging tape"), "plastic",
ifelse(str_detect(hazard_description, "(?i)glass"), "glass",
ifelse(str_detect( raw_text_product, "(?i)glass"), "glass",
ifelse(str_detect(hazard_description, "(?i)metal"), "metal",
ifelse(str_detect( raw_text_product, "(?i)metal"), "metal",
ifelse(str_detect( raw_text_product, "(?i)blade"), "metal",
ifelse(str_detect( raw_text_product, "(?i)aluminum"), "metal",
ifelse(str_detect( raw_text_product, "(?i)iron"), "metal",
ifelse(str_detect( raw_text_product, "(?i)sharp"), "metal",
ifelse(str_detect( raw_text_product, "(?i)needle"), "metal",
ifelse(str_detect(hazard_description, "(?i)wires"), "metal",
ifelse(str_detect(hazard_description, "(?i)nails"), "metal",
ifelse(str_detect(summary, "(?i)foil"), "metal",
ifelse(str_detect(hazard_description, "(?i)insect"), "insects",
ifelse(str_detect(raw_text_product, "(?i)insect"), "insects",
ifelse(str_detect(hazard_description, "(?i)bone"), "bone",
ifelse(str_detect( raw_text_product, "(?i)bone"), "bone",
ifelse(str_detect(hazard_description, "(?i)wood"), "wood",
ifelse(str_detect(raw_text_product, "(?i)wood"), "wood",
ifelse(str_detect(raw_text_product, "(?i)paper"), "paper",
ifelse(str_detect(raw_text_product, "(?i)carton"), "paper",
ifelse(str_detect(raw_text_product, "(?i)cardboard"), "paper",
ifelse(str_detect(raw_text_product, "(?i)soil"), "stones or soil",
ifelse(str_detect(raw_text_product, "(?i)sand "), "stones or soil",
ifelse(str_detect(raw_text_product, "(?i)pebble"), "stones or soil",
ifelse(str_detect(raw_text_product, "(?i)stone"), "stones or soil",
ifelse(str_detect(raw_text_product, "(?i)gravel"), "stones or soil",
ifelse(str_detect(raw_text_product, "(?i)rock"), "stones or soil",
ifelse(str_detect(raw_text_product, "(?i)mice"), "rodents",
ifelse(str_detect(raw_text_product, "(?i)mouse"), "rodents",
ifelse(str_detect(raw_text_product, "(?i)rodent"), "rodents",
"other foreign body")))))))))))))))))))))))))))))))))))))))))
dat9<-bind_rows(foreign, foreign_extra) %>%
filter(date_published_year_month != "NA-NA") %>%
filter(contaminant %in% c("plastic", "metal", "glass", "insects")) %>%
group_by(contaminant) %>%
#filter(n()>500) %>%
ungroup %>%
select(contaminant, date_published_year_month, date_published_year, date_published_year_quarter, ID_incident) %>% distinct() %>%
group_by(contaminant, date_published_year_month, date_published_year, date_published_year_quarter) %>%
mutate(count = n())%>%
distinct()
pc10 <-ggplot(data = dat9, aes(x = date_published_year_quarter  , y = count, group = contaminant)) +
#geom_line(aes(color = contaminant, alpha = 1), size = 1) +
geom_point(aes(color = contaminant, alpha = 1), size = 2) +
geom_smooth(aes(x = date_published_year_quarter  , y = count, color = contaminant))+
#scale_x_continuous(breaks = sort(unique(dat$date_published_year))[c(TRUE, FALSE)]  )+
theme(legend.position = "right", ncol=1) +
#scale_colour_manual(values=c(pal))+
theme_minimal_hgrid(9, rel_small = 1) +
labs(x = "year",  colour="hazard group",
y = "counts",
title = "")+
guides(alpha = FALSE) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
pc10
dat9<-bind_rows(foreign, foreign_extra) %>%
filter(date_published_year_month != "NA-NA") %>%
filter(date_published_year_quarter   != "2020-Q2") %>%
filter(contaminant %in% c("plastic", "metal", "glass", "insects")) %>%
group_by(contaminant) %>%
#filter(n()>500) %>%
ungroup %>%
select(contaminant, date_published_year_month, date_published_year, date_published_year_quarter, ID_incident) %>% distinct() %>%
group_by(contaminant, date_published_year_month, date_published_year, date_published_year_quarter) %>%
mutate(count = n())%>%
distinct()
pc10 <-ggplot(data = dat9, aes(x = date_published_year_quarter  , y = count, group = contaminant)) +
#geom_line(aes(color = contaminant, alpha = 1), size = 1) +
geom_point(aes(color = contaminant, alpha = 1), size = 2) +
geom_smooth(aes(x = date_published_year_quarter  , y = count, color = contaminant))+
#scale_x_continuous(breaks = sort(unique(dat$date_published_year))[c(TRUE, FALSE)]  )+
theme(legend.position = "right", ncol=1) +
#scale_colour_manual(values=c(pal))+
theme_minimal_hgrid(9, rel_small = 1) +
labs(x = "year",  colour="hazard group",
y = "counts",
title = "")+
guides(alpha = FALSE) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
pc10
pc9 <-ggplot(data = dat9, aes(x = date_published_year_month  , y = count, group = contaminant)) +
#geom_line(aes(color = contaminant, alpha = 1), size = 1) +
geom_point(aes(color = contaminant, alpha = 1), size = 2) +
geom_smooth(aes(x = date_published_year_month  , y = count, color = contaminant))+
#scale_x_continuous(breaks = sort(unique(dat$date_published_year))[c(TRUE, FALSE)]  )+
theme(legend.position = "right", ncol=1) +
#scale_colour_manual(values=c(pal))+
theme_minimal_hgrid(9, rel_small = 1) +
labs(x = "year",  colour="hazard group",
y = "counts",
title = "")+
guides(alpha = FALSE) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
pc9
foreign_all<-bind_rows(foreign, foreign_extra)
dim(foreign_all)
foreign_all %>% count(origin_country)
foreign_all %>% count(origin_country, sort=T)
foreign_all %>% count(notified_country, sort=T)
foreign_all %>% count(origin_country, sort=T)
# get world map
wmap <- getMap(resolution="high")
# get centroids
centroids <- gCentroid(wmap, byid=TRUE)
# get a data.frame with centroids
geo_df <- as.data.frame(centroids)
colnames(geo_df) <- c("long", "lat")
geo_df <- geo_df %>% tibble::rownames_to_column("country")
head(geo_df)
}
add_coordinates <- function(input){
input %>%
mutate( origin_country = case_when(origin_country == "USA" ~ "United States of America",
origin_country =="Hong Kong" ~ "Hong Kong S.A.R.",
origin_country =="Serbia" ~ "Republic of Serbia",
origin_country =="Bosnia Herzegovina" ~ "Bosnia and Herzegovina",
origin_country =="Tanzania" ~ "United Republic of Tanzania",
TRUE ~ origin_country)) %>%
mutate( notified_country = case_when(notified_country == "USA" ~ "United States of America",
notified_country =="Hong Kong" ~ "Hong Kong S.A.R.",
notified_country =="Serbia" ~ "Republic of Serbia",
notified_country =="Bosnia Herzegovina" ~ "Bosnia and Herzegovina",
notified_country =="Tanzania" ~ "United Republic of Tanzania",
TRUE ~ notified_country))  %>%
filter(!origin_country %in% c("Palestinian Territories", "INFOSAN" , "Commission Services", NA) | !notified_country %in% c("Palestinian Territories", "INFOSAN" , "Commission Services", NA))
}
add_coordinates <- function(input){
## get coordinates
# get world map
wmap <- getMap(resolution="high")
# get centroids
centroids <- gCentroid(wmap, byid=TRUE)
# get a data.frame with centroids
geo_df <- as.data.frame(centroids)
colnames(geo_df) <- c("long", "lat")
geo_df <- geo_df %>% tibble::rownames_to_column("country")
# update names in data
input<- input %>%
mutate( origin_country = case_when(origin_country == "USA" ~ "United States of America",
origin_country =="Hong Kong" ~ "Hong Kong S.A.R.",
origin_country =="Serbia" ~ "Republic of Serbia",
origin_country =="Bosnia Herzegovina" ~ "Bosnia and Herzegovina",
origin_country =="Tanzania" ~ "United Republic of Tanzania",
TRUE ~ origin_country)) %>%
mutate( notified_country = case_when(notified_country == "USA" ~ "United States of America",
notified_country =="Hong Kong" ~ "Hong Kong S.A.R.",
notified_country =="Serbia" ~ "Republic of Serbia",
notified_country =="Bosnia Herzegovina" ~ "Bosnia and Herzegovina",
notified_country =="Tanzania" ~ "United Republic of Tanzania",
TRUE ~ notified_country))  %>%
filter(!origin_country %in% c("Palestinian Territories", "INFOSAN" , "Commission Services", NA) | !notified_country %in% c("Palestinian Territories", "INFOSAN" , "Commission Services", NA))
# join with coords data
output <- input %>%
left_join(., geo_df, by = c("origin_country" = "country")) %>%
rename("lat.origin" = "lat",
"long.origin" = "long") %>%
left_join(., geo_df, by = c("notified_country" = "country")) %>%
rename("lat.notified" = "lat",
"long.notified" = "long") %>% drop_na()
return(output)
}
test <- add_coordinates(foreign_all)
View(test)
View(foreign_all)
foreign_all %>% count(alert_type, sort=T)
foreign_all %>% count(product_categoty, sort=T)
foreign_all %>%
select(-link, -brand, -manufacturer, -raw_text_product, -organisation, -date_added, -date_added_year) %>%
add_coordinates() %>%
write_tsv("food_hazards_foreign_bodies.csv")
foreign_all %>%
select(-link, -brand, -manufacturer, -raw_text_product, -organisation, -date_added, -date_added_year) %>%
add_coordinates() %>% View
foreign_all %>% count(contaminant, sort=T)
foreign_all<-foreign_all %>%
mutate(contaminant2 = ifelse(contaminant %in% c("wood", "rodents", "bone","stones or soil", "paper"), "other foreign body", contaminant))
foreign_all %>%
select(-link, -brand, -manufacturer, -raw_text_product, -organisation, -date_added, -date_added_year) %>%
add_coordinates() %>%
write_tsv("food_hazards_foreign_bodies.csv")
ggplot(data, aes(x = data_source, fill = alert_type)) +
geom_bar()+
theme_minimal_hgrid(10, rel_small = 1)+
#facet_grid(~alert_type)+
#scale_fill_manual(values=pal)+
coord_flip()+
labs(fill = "title", y="") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dat1<-data %>%
filter(!is.na(hazard_group)) %>%
group_by(hazard_group) %>%
filter(n()>300) %>%
ungroup %>%
select(hazard_group, date_published_year )  %>%
group_by(hazard_group, date_published_year) %>%
mutate(count = n())%>%
distinct()
dat1<-data %>%
filter(!is.na(hazard_group)) %>%
group_by(hazard_group) %>%
filter(n()>300) %>%
ungroup %>%
select(hazard_group, date_published_year )  %>%
group_by(hazard_group, date_published_year) %>%
mutate(count = n())%>%
distinct()
pc <-ggplot(data = dat1, aes(x = date_published_year  , y = count, group = hazard_group)) +
geom_line(aes(color = hazard_group, alpha = 1), size = 1) +
geom_point(aes(color = hazard_group, alpha = 1), size = 3) +
#scale_x_continuous(breaks = sort(unique(dat$date_published_year))[c(TRUE, FALSE)]  )+
theme(legend.position = "right", ncol=1) +
#scale_colour_manual(values=c(pal))+
theme_minimal_hgrid(10, rel_small = 1) +
labs(x = "year",  colour="hazard group",
y = "counts",
title = "")+
guides(alpha = FALSE)
pc
dat2<-data %>%
filter(!is.na(hazard_group)) %>%
group_by(hazard_group) %>%
filter(n()>500) %>%
ungroup %>%
select(hazard_group, date_published_year_month )  %>%
group_by(hazard_group, date_published_year_month) %>%
mutate(count = n())%>%
distinct()
pc <-ggplot(data = dat2, aes(x = date_published_year_month  , y = count, group = hazard_group)) +
geom_line(aes(color = hazard_group, alpha = 1), size = 1) +
geom_point(aes(color = hazard_group, alpha = 1), size = 3) +
#scale_x_continuous(breaks = sort(unique(dat$date_published_year))[c(TRUE, FALSE)]  )+
theme(legend.position = "right", ncol=1) +
#scale_colour_manual(values=c(pal))+
theme_minimal_hgrid(9, rel_small = 1) +
labs(x = "year",  colour="hazard group",
y = "counts",
title = "")+
guides(alpha = FALSE) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
pc
dat3<-data %>%
filter(!is.na(hazard_group)) %>%
group_by(hazard_group) %>%
filter(n()>500) %>%
ungroup %>%
select(hazard_group, date_published_year_month, ID_incident)  %>% distinct() %>%
group_by(hazard_group, date_published_year_month) %>%
mutate(count = n())%>%
distinct()
pc3 <-ggplot(data = dat3, aes(x = date_published_year_month  , y = count, group = hazard_group)) +
geom_line(aes(color = hazard_group, alpha = 1), size = 1) +
geom_point(aes(color = hazard_group, alpha = 1), size = 3) +
#scale_x_continuous(breaks = sort(unique(dat$date_published_year))[c(TRUE, FALSE)]  )+
theme(legend.position = "right", ncol=1) +
#scale_colour_manual(values=c(pal))+
theme_minimal_hgrid(9, rel_small = 1) +
labs(x = "year",  colour="hazard group",
y = "counts",
title = "")+
guides(alpha = FALSE) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
pc3
dat4<-data %>%
filter(!is.na(hazard_group),
date_published_year_month != "NA-NA") %>%
group_by(hazard_group) %>%
#filter(n()>500) %>%
ungroup %>%
select(hazard_group, date_published_year_month, ID_incident)  %>% distinct() %>%
group_by(hazard_group, date_published_year_month) %>%
filter(hazard_group %in% c("microbial contaminants (other)", "pathogenic micro-organisms", "allergens")) %>%
mutate(count = n())%>%
distinct()
pc4 <-ggplot(data = dat4, aes(x = date_published_year_month  , y = count, group = hazard_group)) +
#geom_line(aes(color = hazard_group, alpha = 1), size = 1) +
geom_point(aes(color = hazard_group, alpha = 1), size = 3) +
geom_smooth(aes(x = date_published_year_month  , y = count, color = hazard_group))+
#scale_x_continuous(breaks = sort(unique(dat$date_published_year))[c(TRUE, FALSE)]  )+
theme(legend.position = "right", ncol=1) +
#scale_colour_manual(values=c(pal))+
theme_minimal_hgrid(9, rel_small = 1) +
labs(x = "year",  colour="hazard group",
y = "counts",
title = "")+
guides(alpha = FALSE) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
pc4
dat5<-data %>%
filter(!is.na(hazard_group),
date_published_year_month != "NA-NA") %>%
group_by(hazard_group) %>%
filter(n()>500) %>%
ungroup %>%
select(hazard_group, date_published_year_month, ID_incident)  %>% distinct() %>%
group_by(hazard_group, date_published_year_month) %>%
#filter(hazard_group %in% c("microbial contaminants (other)", "pathogenic micro-organisms", "allergens")) %>%
mutate(count = n())%>%
distinct()
pc5 <-ggplot(data = dat5, aes(x = date_published_year_month  , y = count, group = hazard_group)) +
#geom_line(aes(color = hazard_group, alpha = 1), size = 1) +
geom_point(aes(color = hazard_group, alpha = 1), size = 3) +
geom_smooth(aes(x = date_published_year_month  , y = count, color = hazard_group))+
#scale_x_continuous(breaks = sort(unique(dat$date_published_year))[c(TRUE, FALSE)]  )+
theme(legend.position = "right", ncol=1) +
#scale_colour_manual(values=c(pal))+
theme_minimal_hgrid(9, rel_small = 1) +
labs(x = "year",  colour="hazard group",
y = "counts",
title = "")+
guides(alpha = FALSE) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
pc5
pc7 <-ggplot(data = dat7, aes(x = date_published_year_month  , y = count, group = hazard_group)) +
#geom_line(aes(color = hazard_group, alpha = 1), size = 1) +
geom_point(aes(color = hazard_group, alpha = 1), size = 3) +
geom_smooth(aes(x = date_published_year_month  , y = count, color = hazard_group))+
#scale_x_continuous(breaks = sort(unique(dat$date_published_year))[c(TRUE, FALSE)]  )+
theme(legend.position = "right", ncol=1) +
#scale_colour_manual(values=c(pal))+
theme_minimal_hgrid(9, rel_small = 1) +
labs(x = "year",  colour="hazard group",
y = "counts",
title = "")+
guides(alpha = FALSE) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
pc7
dat7<-data %>%
filter(!is.na(hazard_group),
date_published_year_month != "NA-NA") %>%
group_by(hazard_group) %>%
filter(n()>500) %>%
ungroup %>%
select(hazard_group, date_published_year_month, ID_incident) %>% distinct() %>%
group_by(hazard_group, date_published_year_month) %>%
filter(hazard_group == "foreign bodies") %>%
mutate(count = n())%>%
distinct()
pc7 <-ggplot(data = dat7, aes(x = date_published_year_month  , y = count, group = hazard_group)) +
#geom_line(aes(color = hazard_group, alpha = 1), size = 1) +
geom_point(aes(color = hazard_group, alpha = 1), size = 3) +
geom_smooth(aes(x = date_published_year_month  , y = count, color = hazard_group))+
#scale_x_continuous(breaks = sort(unique(dat$date_published_year))[c(TRUE, FALSE)]  )+
theme(legend.position = "right", ncol=1) +
#scale_colour_manual(values=c(pal))+
theme_minimal_hgrid(9, rel_small = 1) +
labs(x = "year",  colour="hazard group",
y = "counts",
title = "")+
guides(alpha = FALSE) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
pc7
dat7<-foreign %>%
filter(date_published_year_month != "NA-NA") %>%
group_by(contaminant) %>%
#filter(n()>500) %>%
ungroup %>%
select(contaminant, date_published_year_month, ID_incident) %>% distinct() %>%
group_by(contaminant, date_published_year_month) %>%
mutate(count = n())%>%
distinct()
pc7 <-ggplot(data = dat7, aes(x = date_published_year_month  , y = count, group = contaminant)) +
#geom_line(aes(color = contaminant, alpha = 1), size = 1) +
geom_point(aes(color = contaminant, alpha = 1), size = 3) +
geom_smooth(aes(x = date_published_year_month  , y = count, color = contaminant))+
#scale_x_continuous(breaks = sort(unique(dat$date_published_year))[c(TRUE, FALSE)]  )+
theme(legend.position = "right", ncol=1) +
#scale_colour_manual(values=c(pal))+
theme_minimal_hgrid(9, rel_small = 1) +
labs(x = "year",  colour="hazard group",
y = "counts",
title = "")+
guides(alpha = FALSE) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
pc7
foreign_extra <- data %>%
filter(hazard_group != "foreign bodies") %>%
mutate(contaminant = ifelse(str_detect(hazard_description, "(?i)plastic"), "plastic",
ifelse(str_detect( raw_text_product, "(?i)plastic"), "plastic",
ifelse(str_detect(hazard_description, "(?i)polystyrene"), "plastic",
ifelse(str_detect(hazard_description, "(?i)film"), "plastic",
ifelse(str_detect(hazard_description, "(?i)nylon"), "plastic",
ifelse(str_detect(raw_text_product, "(?i)rubber"), "plastic",
ifelse(str_detect(raw_text_product, "(?i)conveyor belt"), "plastic",
ifelse(str_detect(raw_text_product, "(?i)blue particles"), "plastic",
ifelse(str_detect(raw_text_product, "(?i)white and blue"), "plastic",
ifelse(str_detect(raw_text_product, "(?i)packaging tape"), "plastic",
ifelse(str_detect(hazard_description, "(?i)metal"), "metal",
ifelse(str_detect( raw_text_product, "(?i)metal"), "metal",
ifelse(str_detect( raw_text_product, "(?i)blade"), "metal",
ifelse(str_detect( raw_text_product, "(?i)aluminum"), "metal",
ifelse(str_detect( raw_text_product, "(?i) iron"), "metal",
ifelse(str_detect( raw_text_product, "(?i)sharp"), "metal",
ifelse(str_detect( raw_text_product, "(?i)needle"), "metal",
ifelse(str_detect(hazard_description, "(?i)wires"), "metal",
ifelse(str_detect(hazard_description, "(?i)nails"), "metal",
ifelse(str_detect(summary, "(?i)foil"), "metal",
ifelse(str_detect(hazard_description, "(?i)glass"), "glass",
ifelse(str_detect( raw_text_product, "(?i)glass"), "glass",
ifelse(str_detect(hazard_description, "(?i)insect"), "insects",
ifelse(str_detect(raw_text_product, "(?i)insect"), "insects",
"other foreign body"))))))))))))))))))))))))) %>%
filter(contaminant != "other foreign body") %>%
filter(!(contaminant == "metal" & grepl("heavy metal|metallic|Lead|alkaloid|metalaxyl", raw_text_product, ignore.case = T))) %>%
filter(!(contaminant == "metal" & grepl("heavy metal|metallic|Lead|alkaloid", summary, ignore.case = T))) %>%
filter(!(contaminant == "metal" & hazard_description %in% c("undeclared peanut", "unauthorised substance magnesium",
"unauthorised substance iron glycinate chelate", "too high content of iron",
"salmonella outbreak" ,"salmonella spp sticks", "copper", "undesignated additive"))) %>%
filter(!(contaminant %in% c("plastic", "glass") & !grepl("piece|foreign|extraneous|find|bits|particle|plastic in", raw_text_product, ignore.case = T)))
foreign_extra <- data %>%
filter(hazard_group != "foreign bodies") %>%
mutate(contaminant = ifelse(str_detect(hazard_description, "(?i)plastic"), "plastic",
ifelse(str_detect( raw_text_product, "(?i)plastic"), "plastic",
ifelse(str_detect(hazard_description, "(?i)polystyrene"), "plastic",
ifelse(str_detect(hazard_description, "(?i)film"), "plastic",
ifelse(str_detect(hazard_description, "(?i)nylon"), "plastic",
ifelse(str_detect(raw_text_product, "(?i)rubber"), "plastic",
ifelse(str_detect(raw_text_product, "(?i)conveyor belt"), "plastic",
ifelse(str_detect(raw_text_product, "(?i)blue particles"), "plastic",
ifelse(str_detect(raw_text_product, "(?i)white and blue"), "plastic",
ifelse(str_detect(raw_text_product, "(?i)packaging tape"), "plastic",
ifelse(str_detect(hazard_description, "(?i)metal"), "metal",
ifelse(str_detect( raw_text_product, "(?i)metal"), "metal",
ifelse(str_detect( raw_text_product, "(?i)blade"), "metal",
ifelse(str_detect( raw_text_product, "(?i)aluminum"), "metal",
ifelse(str_detect( raw_text_product, "(?i) iron"), "metal",
ifelse(str_detect( raw_text_product, "(?i)sharp"), "metal",
ifelse(str_detect( raw_text_product, "(?i)needle"), "metal",
ifelse(str_detect(hazard_description, "(?i)wires"), "metal",
ifelse(str_detect(hazard_description, "(?i)nails"), "metal",
ifelse(str_detect(summary, "(?i)foil"), "metal",
ifelse(str_detect(hazard_description, "(?i)glass"), "glass",
ifelse(str_detect( raw_text_product, "(?i)glass"), "glass",
ifelse(str_detect(hazard_description, "(?i)insect"), "insects",
ifelse(str_detect(raw_text_product, "(?i)insect"), "insects",
"other foreign body"))))))))))))))))))))))))) %>%
filter(contaminant != "other foreign body") %>%
filter(!(contaminant == "metal" & grepl("heavy metal|metallic|Lead|alkaloid|metalaxyl", raw_text_product, ignore.case = T))) %>%
filter(!(contaminant == "metal" & grepl("heavy metal|metallic|Lead|alkaloid", summary, ignore.case = T))) %>%
filter(!(contaminant == "metal" & hazard_description %in% c("undeclared peanut", "unauthorised substance magnesium",
"unauthorised substance iron glycinate chelate", "too high content of iron",
"salmonella outbreak" ,"salmonella spp sticks", "copper", "undesignated additive"))) %>%
filter(!(contaminant %in% c("plastic", "glass") & !grepl("piece|foreign|extraneous|find|bits|particle|plastic in", raw_text_product, ignore.case = T)))
data_test %>% count(contaminant, sort=T)
